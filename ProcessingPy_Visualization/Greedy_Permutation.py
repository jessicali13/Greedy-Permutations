from Greedy_Set import Point, WorkingSet
import unittest


def greedypermutation(pointlist, greedyset):
    """
    The greedy permutation algorithm, takes WorkingSet of unselected points and outputs sorted WorkingSet
    :param pointlist:
    :param greedyset:
    :return: The completed list ordered by greedy permutation
    """

    if pointlist.setsize < 1:
        # Return none if list of unselected points is empty
        return None

    # Choose the first point generated by user as the starting point
    greedyset.addpoint(pointlist.set[0])
    pointlist.removepoint(pointlist.set[0])

    # Compute inital distances from set
    for freepoint in pointlist.set:
        freepoint.wsetdistance(greedyset)

    # Begin inserting the rest of the points into the greedy set w/ greedy algorithm (furthest point from set)
    pointholder = None
    while pointlist.setsize > 0:
        tempdistance = 0
        for freepoint in pointlist.set:
            # Check if current freepoint is further from the set then current pointholder
            if freepoint.wset_dist > tempdistance:
                pointholder = freepoint
                tempdistance = freepoint.wset_dist

        # Insert furthest point into greedy set, remove from the list of unselected points
        greedyset.addpoint(pointholder)
        pointlist.removepoint(pointholder)

        # Updates all of the working set distances of the unselected points
        # w/ respect to the new entry in the greedy set
        for freepoint in pointlist.set:
            if freepoint.wset_dist > freepoint.pointdistance(pointholder):
                freepoint.wset_dist = freepoint.pointdistance(pointholder)

    return greedyset


def user_createnewpoint(x, y, pointlist):
    """
    Takes user coordinate inputs and creates an instance of Point
    then inserts the instance into the list of unselected points
    :param x:
    :param y:
    :param pointlist:
    """

    newpoint = Point(x, y)
    pointlist.addpoint(newpoint)


class TestGreedyPermutation(unittest.TestCase):
    """Testing class for the file"""

    # Test case for greedy algorithm
    def test_greedypermutation(self):
        alist = [Point(-8, 0), Point(1, 0), Point(3, 8), Point(2, 2), Point(1, 9), Point(-1, -4), Point(0, 0)]
        correctlist = [alist[0], alist[2], alist[1], alist[5], alist[3], alist[4], alist[6]]
        greedyset = WorkingSet()
        pointlist = WorkingSet()
        for a in alist:
            pointlist.addpoint(a)

        greedypermutation(pointlist, greedyset)
        for index, point in enumerate(greedyset.set):
            self.assertEqual(greedyset.set[index], correctlist[index])


if __name__ == '__main__':
    unittest.main()