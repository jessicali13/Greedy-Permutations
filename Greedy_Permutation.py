from Greedy_Set import Point, WorkingSet


def greedypermutation(pointlist, greedyset):
    """
    The greedy permutation algorithm, creates ordered set of
    :param pointlist:
    :param greedyset:
    :return: The completed list ordered by greedy permutation
    """

    if pointlist.setsize < 1:
        # Return none if list of unselected points is empty
        return None

    # Choose the first point generated by user as the starting point
    greedyset.addpoint(pointlist[0])
    pointlist.removepoint(pointlist[0])

    # Compute inital distances from set
    for freepoint in pointlist:
        freepoint.wsetdistance(greedyset)

    # Begin inserting the rest of the points into the greedy set w/ greedy algorithm (furthest point from set)
    pointholder = None
    while pointlist.setsize > 0:
        tempdistance = 0
        for freepoint in pointlist:
            # Check if current freepoint is further from the set then current pointholder
            if freepoint.wset_dist > tempdistance:
                pointholder = freepoint
                tempdistance = freepoint.wset_dist

        # Insert furthest point into greedy set, remove from the list of unselected points
        greedyset.addpoint(pointholder)
        pointlist.removepoint(pointholder)

        # Updates all of the working set distances of the unselected points
        # w/ respect to the new entry in the greedy set
        for freepoint in pointlist:
            if freepoint.wset_dist > freepoint.pointdistance(pointholder):
                freepoint.wset_dist = freepoint.pointdistance(pointholder)

        return greedyset


def user_createnewpoint(x, y, pointlist):
    """
    Takes user coordinate inputs and creates an instance of Point
    then inserts the instance into the list of unselected points
    :param x:
    :param y:
    :param pointlist:
    """

    newpoint = Point(x, y)
    pointlist.addpoint(newpoint)